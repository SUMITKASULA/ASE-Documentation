{
  "api/ASE_Assignment_Test_Project.CommandFactoryTest.html": {
    "href": "api/ASE_Assignment_Test_Project.CommandFactoryTest.html",
    "title": "Class CommandFactoryTest | ASE Project",
    "keywords": "Class CommandFactoryTest Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Test class to verify the behavior of the AppCommandFactory and its command creation logic. [TestClass] public class CommandFactoryTest Inheritance object CommandFactoryTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Sets up the test environment by initializing a new AppCommandFactory instance. [TestInitialize] public void SetUp() TestMakeCommand_Array_ShouldReturnReset() Tests that the \"array\" command returns a ApplicationArray object. [TestMethod] public void TestMakeCommand_Array_ShouldReturnReset() TestMakeCommand_Boolean_ShouldReturnReset() Tests that the \"boolean\" command returns a ApplicationBoolean object. [TestMethod] public void TestMakeCommand_Boolean_ShouldReturnReset() TestMakeCommand_Call_ShouldReturnReset() Tests that the \"call\" command returns a BOOSE.Call object. [TestMethod] public void TestMakeCommand_Call_ShouldReturnReset() TestMakeCommand_Circle_ShouldReturnAppCircle() Tests that the \"circle\" command returns a MyCircle object. [TestMethod] public void TestMakeCommand_Circle_ShouldReturnAppCircle() TestMakeCommand_Clear_ShouldReturnClear() Tests that the \"clear\" command returns a MyClear object. [TestMethod] public void TestMakeCommand_Clear_ShouldReturnClear() TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() Tests that the \"drawto\" command returns a MyDrawTo object. [TestMethod] public void TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() TestMakeCommand_Else_ShouldReturnReset() Tests that the \"else\" command returns a ApplicationElse object. [TestMethod] public void TestMakeCommand_Else_ShouldReturnReset() TestMakeCommand_End_ShouldReturnReset() Tests that the \"end\" command returns a ApplicationEnd object. [TestMethod] public void TestMakeCommand_End_ShouldReturnReset() TestMakeCommand_Evaluation_ShouldReturnReset() Tests that the \"call\" command returns a BOOSE.Evaluation object. [TestMethod] public void TestMakeCommand_Evaluation_ShouldReturnReset() TestMakeCommand_Fill_ShouldReturnFill() Tests that the \"fill\" command returns a MyFill object. [TestMethod] public void TestMakeCommand_Fill_ShouldReturnFill() TestMakeCommand_For_ShouldReturnReset() Tests that the \"for\" command returns a ApplicationFor object. [TestMethod] public void TestMakeCommand_For_ShouldReturnReset() TestMakeCommand_If_ShouldReturnReset() Tests that the \"else\" command returns a ApplicationIf object. [TestMethod] public void TestMakeCommand_If_ShouldReturnReset() TestMakeCommand_Int_ShouldReturnReset() Tests that the \"int\" command returns a ApplicationInt object. [TestMethod] public void TestMakeCommand_Int_ShouldReturnReset() TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() Tests that invalid commands throw a BOOSE.FactoryException. [TestMethod] [ExpectedException(typeof(FactoryException))] public void TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() Tests that the \"moveto\" command returns a MyMoveTo object. [TestMethod] public void TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() TestMakeCommand_Peek_ShouldReturnReset() Tests that the \"poke\" command returns a ApplicationPeek object. [TestMethod] public void TestMakeCommand_Peek_ShouldReturnReset() TestMakeCommand_PenColour_ShouldReturnAppPenColour() Tests that the \"pencolour\" command returns a MyPenColour object. [TestMethod] public void TestMakeCommand_PenColour_ShouldReturnAppPenColour() TestMakeCommand_PenSize_ShouldReturnPenSize() Tests that the \"pensize\" command returns a PenSize object. [TestMethod] public void TestMakeCommand_PenSize_ShouldReturnPenSize() TestMakeCommand_Poke_ShouldReturnReset() Tests that the \"poke\" command returns a ApplicationPoke object. [TestMethod] public void TestMakeCommand_Poke_ShouldReturnReset() TestMakeCommand_Real_ShouldReturnReset() Tests that the \"real\" command returns a ApplicationReal object. [TestMethod] public void TestMakeCommand_Real_ShouldReturnReset() TestMakeCommand_Rect_ShouldReturnAppRectangle() Tests that the \"rect\" command returns a MyRectangle object. [TestMethod] public void TestMakeCommand_Rect_ShouldReturnAppRectangle() TestMakeCommand_Reset_ShouldReturnReset() Tests that the \"reset\" command returns a MyResets object. [TestMethod] public void TestMakeCommand_Reset_ShouldReturnReset() TestMakeCommand_Tri_ShouldReturnTriangle() Tests that the \"tri\" command returns a MyTriangle object. [TestMethod] public void TestMakeCommand_Tri_ShouldReturnTriangle() TestMakeCommand_While_ShouldReturnReset() Tests that the \"while\" command returns a ApplicationWhile object. [TestMethod] public void TestMakeCommand_While_ShouldReturnReset() TestMakeCommand_WriteTo_ShouldReturnWriteTo() Tests that the \"writeto\" command returns a MyWriteTo object. [TestMethod] public void TestMakeCommand_WriteTo_ShouldReturnWriteTo() TestMakeCommand_method_ShouldReturnReset() Tests that the \"method\" command returns a ApplicationMethod object. [TestMethod] public void TestMakeCommand_method_ShouldReturnReset()"
  },
  "api/ASE_Assignment_Test_Project.CommandUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Project.CommandUnitTests.html",
    "title": "Class CommandUnitTests | ASE Project",
    "keywords": "Class CommandUnitTests Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll [TestClass] public class CommandUnitTests Inheritance object CommandUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() [TestInitialize] public void Setup() Test_ArrayCommand_Restricted() public void Test_ArrayCommand_Restricted() Test_ArrayCommand_UnRestricted() public void Test_ArrayCommand_UnRestricted() Test_ForCommand_Restricted() [TestMethod] public void Test_ForCommand_Restricted() Test_ForCommand_Unrestricted() [TestMethod] public void Test_ForCommand_Unrestricted() Test_IFCommand_Restricted() [TestMethod] public void Test_IFCommand_Restricted() Test_IFCommand_Unrestricted() [TestMethod] public void Test_IFCommand_Unrestricted() Test_IntCommand_Restricted() [TestMethod] public void Test_IntCommand_Restricted() Test_IntCommand_UnRestricted() [TestMethod] public void Test_IntCommand_UnRestricted() Test_MethodCommand_UnRestricted() public void Test_MethodCommand_UnRestricted() Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() [TestMethod] public void Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Test_ProgramSizeCommand_UnRestricted() public void Test_ProgramSizeCommand_UnRestricted() Test_RealCommand_Restricted() [TestMethod] public void Test_RealCommand_Restricted() Test_RealCommand_Unrestricted() [TestMethod] public void Test_RealCommand_Unrestricted() Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() [TestMethod] public void Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Tests that running a single command does not change the global output exception message. [TestMethod] public void Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Examples This test runs a single moveto command and verifies that no exception is thrown: mockParser.ParseProgram(\"moveto 100,100\"); program.Run(); Assert.IsTrue(true, \"No exception should be thrown when a valid single command is executed.\"); Remarks Validates that even when a single valid command is executed, no exception is thrown during execution. Test_WhileCommand_Restricted() [TestMethod] public void Test_WhileCommand_Restricted() Test_WhileCommand_Unrestricted() [TestMethod] public void Test_WhileCommand_Unrestricted()"
  },
  "api/ASE_Assignment_Test_Project.GloabalConfigTest.html": {
    "href": "api/ASE_Assignment_Test_Project.GloabalConfigTest.html",
    "title": "Class GloabalConfigTest | ASE Project",
    "keywords": "Class GloabalConfigTest Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Unit tests for the GlobalConfig class. [TestClass] public class GloabalConfigTest Inheritance object GloabalConfigTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestSetAndGetIsFillEnabled() Tests setting and getting the IsFillEnabled property. [TestMethod] public void TestSetAndGetIsFillEnabled() TestSetAndGetMaxX() Tests setting and getting the MaxX property. [TestMethod] public void TestSetAndGetMaxX() TestSetAndGetMaxY() Tests setting and getting the MaxY property. [TestMethod] public void TestSetAndGetMaxY() TestSetAndGetPenSize() Tests setting and getting the PenSize property. [TestMethod] public void TestSetAndGetPenSize()"
  },
  "api/ASE_Assignment_Test_Project.MyAppCanvasTest.html": {
    "href": "api/ASE_Assignment_Test_Project.MyAppCanvasTest.html",
    "title": "Class MyAppCanvasTest | ASE Project",
    "keywords": "Class MyAppCanvasTest Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Unit tests for the AppCanvas class. [TestClass] public sealed class MyAppCanvasTest Inheritance object MyAppCanvasTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields canvas The canvas instance used for testing. public AppCanvas canvas Field Value AppCanvas Methods DrawTo_ShouldThrowException_WhenGraphicsContextIsNull() Tests drawing with null graphics context throws an exception. [TestMethod] [ExpectedException(typeof(CanvasException))] public void DrawTo_ShouldThrowException_WhenGraphicsContextIsNull() SetCanvas_ShouldInitialize_WhenBitmapAndGraphicsAreValid() Tests initializing canvas with valid bitmap and graphics context. [TestMethod] public void SetCanvas_ShouldInitialize_WhenBitmapAndGraphicsAreValid() SetUp() Initializes the canvas before each test. [TestInitialize] public void SetUp() TestBoundaryPenPosition() Tests boundary checks for pen positions. [TestMethod] public void TestBoundaryPenPosition() TestCircleExceedsCanvas() Tests drawing a circle that exceeds canvas size throws an exception. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestCircleExceedsCanvas() TestCustomCanvasSizeInitialization() Tests initializing the canvas with a custom size. [TestMethod] public void TestCustomCanvasSizeInitialization() TestDefaultConstructor() Tests the default constructor of AppCanvas. [TestMethod] public void TestDefaultConstructor() TestDrawCircleInvalidRadius() Tests that drawing a circle with an invalid radius throws an exception. [TestMethod] public void TestDrawCircleInvalidRadius() TestDrawCircleValid() Tests drawing a circle with valid parameters. [TestMethod] public void TestDrawCircleValid() TestExceedMaximumCanvasSize() Tests exceeding maximum canvas size throws an exception. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestExceedMaximumCanvasSize() TestInvalidCanvasSize_ShouldThrowCanvasException() Tests that invalid canvas sizes throw a CanvasException. [TestMethod] public void TestInvalidCanvasSize_ShouldThrowCanvasException() TestResetCanvas() Tests resetting the canvas. [TestMethod] public void TestResetCanvas() TestSetPenColorValid() Tests setting a valid pen color. [TestMethod] public void TestSetPenColorValid() TestSetPenPositionInvalid() Tests setting an invalid pen position and verifies defaults. [TestMethod] public void TestSetPenPositionInvalid() TestSetPenPositionValid() Tests setting a valid pen position. [TestMethod] public void TestSetPenPositionValid() TestSetPenSizeInvalid() Tests setting an invalid pen size and verifying defaults. [TestMethod] public void TestSetPenSizeInvalid() TestSetPenSizeValid() Tests setting a valid pen size. [TestMethod] public void TestSetPenSizeValid() TestToggleShapeFilling() Tests toggling shape filling property. [TestMethod] public void TestToggleShapeFilling()"
  },
  "api/ASE_Assignment_Test_Project.MyCircleUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Project.MyCircleUnitTests.html",
    "title": "Class MyCircleUnitTests | ASE Project",
    "keywords": "Class MyCircleUnitTests Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Unit tests for the CommandCircle class. [TestClass] public class MyCircleUnitTests Inheritance object MyCircleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that CheckParameters does not throw an exception for valid input parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the CommandCircle constructor initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes test setup before each test method. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Project.MyClearUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Project.MyClearUnitTests.html",
    "title": "Class MyClearUnitTests | ASE Project",
    "keywords": "Class MyClearUnitTests Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Unit tests for the CanvasClear command. [TestClass] public class MyClearUnitTests Inheritance object MyClearUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() Tests that CheckParameters ignores additional unexpected parameters without throwing exceptions. [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Tests that CheckParameters does not throw an exception when the parameter list is empty. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Tests that CheckParameters does not throw an exception when the parameter list is null. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() Tests that the CanvasClear constructor initializes correctly with a valid Canvas object. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldClearCanvas_WhenCanvasIsValid() Tests that Execute calls the Clear method on the Canvas object when it is valid. [TestMethod] public void Execute_ShouldClearCanvas_WhenCanvasIsValid() Execute_ShouldHandleNullCanvas_Gracefully() Tests that Execute handles a null canvas gracefully by throwing a NullReferenceException. [TestMethod] public void Execute_ShouldHandleNullCanvas_Gracefully() Execute_ShouldNotThrowException_WhenCanvasIsEmpty() Tests that Execute does not throw an exception even when the canvas is empty. [TestMethod] public void Execute_ShouldNotThrowException_WhenCanvasIsEmpty() TestInitialize() Initializes the test setup before each test method. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Project.MyDrawToUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Project.MyDrawToUnitTests.html",
    "title": "Class MyDrawToUnitTests | ASE Project",
    "keywords": "Class MyDrawToUnitTests Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Test class for CommandDrawTo unit tests. [TestClass] public class MyDrawToUnitTests Inheritance object MyDrawToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests whether CheckParameters method does not throw exceptions when parameters are valid. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests whether the CommandDrawTo constructor initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() Tests whether the CommandDrawTo constructor throws a RestrictionException when coordinates are negative. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() TestInitialize() Initializes the mock Canvas object before each test. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Project.MyFillUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Project.MyFillUnitTests.html",
    "title": "Class MyFillUnitTests | ASE Project",
    "keywords": "Class MyFillUnitTests Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Unit tests for the CommandFill class. [TestClass] public class MyFillUnitTests Inheritance object MyFillUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldThrowCommandException_WhenMoreThanOneParameterProvided() Tests if CheckParameters throws a CommandException when more than one parameter is provided. [TestMethod] public void CheckParameters_ShouldThrowCommandException_WhenMoreThanOneParameterProvided() CheckParameters_ShouldThrowCommandException_WhenNoParametersProvided() Tests if CheckParameters throws a CommandException when no parameters are provided. [TestMethod] public void CheckParameters_ShouldThrowCommandException_WhenNoParametersProvided() CheckParameters_ShouldThrowCommandException_WhenParameterIsEmpty() Tests if CheckParameters throws a CommandException when an empty parameter is provided. [TestMethod] public void CheckParameters_ShouldThrowCommandException_WhenParameterIsEmpty() Constructor_ShouldInitialize_WhenTextIsValid() Tests if the constructor initializes properly with valid text. [TestMethod] public void Constructor_ShouldInitialize_WhenTextIsValid() Constructor_ShouldThrowException_WhenTextIsNull() Tests if the constructor throws an exception when a null text parameter is provided. [TestMethod] public void Constructor_ShouldThrowException_WhenTextIsNull() Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() Tests if Execute method throws a RestrictionException when the text length exceeds allowed limits. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() Tests if Execute method throws a RestrictionException for whitespace text. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() TestInitialize() Initializes the mock Canvas object before each test. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Project.MyMoveToUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Project.MyMoveToUnitTests.html",
    "title": "Class MyMoveToUnitTests | ASE Project",
    "keywords": "Class MyMoveToUnitTests Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Unit tests for the CommandMoveTo class. [TestClass] public class MyMoveToUnitTests Inheritance object MyMoveToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests whether CheckParameters does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests whether the CommandMoveTo constructor initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() Tests whether the CommandMoveTo constructor throws a RestrictionException when coordinates exceed limits. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() TestInitialize() Initializes test setup before each test method execution. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Project.MyPenColourUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Project.MyPenColourUnitTests.html",
    "title": "Class MyPenColourUnitTests | ASE Project",
    "keywords": "Class MyPenColourUnitTests Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Unit tests for the CommandPenColour class, ensuring it behaves correctly. [TestClass] public class MyPenColourUnitTests Inheritance object MyPenColourUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests whether the CheckParameters method processes valid input parameters without throwing exceptions. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests whether the CommandPenColour constructor initializes properly when given valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the test environment and sets up mock dependencies before each test. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Project.MyRectangleUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Project.MyRectangleUnitTests.html",
    "title": "Class MyRectangleUnitTests | ASE Project",
    "keywords": "Class MyRectangleUnitTests Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Unit tests for the CommandRectangle class. [TestClass] public class MyRectangleUnitTests Inheritance object MyRectangleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests whether CheckParameters does not throw exceptions when valid parameters are provided. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests whether the constructor initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes resources before each test. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Project.MyResetsUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Project.MyResetsUnitTests.html",
    "title": "Class MyResetsUnitTests | ASE Project",
    "keywords": "Class MyResetsUnitTests Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Unit test class for testing the Reseter class methods. [TestClass] public class MyResetsUnitTests Inheritance object MyResetsUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() Tests that the CheckParameters method ignores additional parameters without throwing exceptions. [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Tests that the CheckParameters method does not throw an exception when the parameter list is empty. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Tests that the CheckParameters method does not throw an exception when the parameter list is null. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() Tests that the constructor of Reseter initializes correctly when a valid canvas is provided. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() Tests that the Execute method throws a NullReferenceException when the canvas is null. [TestMethod] public void Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() TestInitialize() Initializes the test environment by creating a mock BOOSE.Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Project.MyStoredProgramUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Project.MyStoredProgramUnitTests.html",
    "title": "Class MyStoredProgramUnitTests | ASE Project",
    "keywords": "Class MyStoredProgramUnitTests Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Unit tests for the MyStoredProgram class. [TestClass] public class MyStoredProgramUnitTests Inheritance object MyStoredProgramUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() Initializes the test setup by creating mock dependencies and the instance of MyStoredProgram. [TestInitialize] public void Setup() Test_AddVariable_Duplicate_ShouldNotStore() Tests that adding a duplicate variable does not overwrite the original value. [TestMethod] public void Test_AddVariable_Duplicate_ShouldNotStore() Test_AddVariable_ShouldStoreVariable() Tests if a variable can be successfully added and retrieved from the program. [TestMethod] public void Test_AddVariable_ShouldStoreVariable() Test_EvaluateExpression_Invalid_ShouldThrowException() Tests if an exception is thrown when evaluating an invalid expression. [TestMethod] public void Test_EvaluateExpression_Invalid_ShouldThrowException() Test_EvaluateExpression_ShouldReturnResult() Tests if an expression containing a variable and arithmetic can be evaluated correctly. [TestMethod] public void Test_EvaluateExpression_ShouldReturnResult() Test_InitializeProgram_ShouldSetDefaults() Tests if the MyStoredProgram is correctly initialized with default values. [TestMethod] public void Test_InitializeProgram_ShouldSetDefaults() Test_PopEmptyStack_ShouldThrowException() Tests if an exception is thrown when attempting to pop from an empty stack. [TestMethod] public void Test_PopEmptyStack_ShouldThrowException() Test_PushPopConditionalCommands_ShouldHandleStack() Tests if conditional commands can be pushed to and popped from the stack correctly. [TestMethod] public void Test_PushPopConditionalCommands_ShouldHandleStack() Test_UpdateVariable_ShouldUpdateValue() Tests if the value of an existing variable can be updated correctly. [TestMethod] public void Test_UpdateVariable_ShouldUpdateValue()"
  },
  "api/ASE_Assignment_Test_Project.MyTriangleTests.html": {
    "href": "api/ASE_Assignment_Test_Project.MyTriangleTests.html",
    "title": "Class MyTriangleTests | ASE Project",
    "keywords": "Class MyTriangleTests Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Unit test class for testing the CommandTriangle class methods. [TestClass] public class MyTriangleTests Inheritance object MyTriangleTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that the CheckParameters method does not throw an exception when valid parameters are passed. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the constructor of CommandTriangle initializes correctly when valid parameters are provided. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldSetBaseLengthAndHeightCorrectly() Tests that the constructor of CommandTriangle sets the base length and height correctly. [TestMethod] public void Constructor_ShouldSetBaseLengthAndHeightCorrectly() TestInitialize() Initializes the test environment by creating a mock BOOSE.Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Project.MyWriteToUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Project.MyWriteToUnitTests.html",
    "title": "Class MyWriteToUnitTests | ASE Project",
    "keywords": "Class MyWriteToUnitTests Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Unit test class for testing the CommandWriteText class methods. [TestClass] public class MyWriteToUnitTests Inheritance object MyWriteToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParameterIsValid() Tests that the CheckParameters method does not throw an exception when a valid parameter is passed. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParameterIsValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the constructor of CommandWriteText initializes correctly when valid parameters are provided. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the test environment by creating a mock BOOSE.Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Project.ParserTest.html": {
    "href": "api/ASE_Assignment_Test_Project.ParserTest.html",
    "title": "Class ParserTest | ASE Project",
    "keywords": "Class ParserTest Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Unit test class for testing the CommandParser class methods. [TestClass] public class ParserTest Inheritance object ParserTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Initializes the test environment by creating real instances of the required classes. [TestInitialize] public void SetUp() TestParseCommand_ShouldReturnValidCommand_ForKnownCommand() Tests that the CommandParser correctly parses a known command and returns a valid command object. [TestMethod] public void TestParseCommand_ShouldReturnValidCommand_ForKnownCommand()"
  },
  "api/ASE_Assignment_Test_Project.PenSizeUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Project.PenSizeUnitTests.html",
    "title": "Class PenSizeUnitTests | ASE Project",
    "keywords": "Class PenSizeUnitTests Namespace ASE_Assignment_Test_Project Assembly ASE-Assignment-Test-Project.dll Unit test class for testing the PenSize class methods. [TestClass] public class PenSizeUnitTests Inheritance object PenSizeUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that the CheckParameters method does not throw an exception when valid parameters are passed. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the constructor of PenSize initializes correctly when valid parameters are provided. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Execute_ShouldHandleBoundaryValue_Zero() Tests that the Execute method handles a boundary value of zero for the pen size. [TestMethod] public void Execute_ShouldHandleBoundaryValue_Zero() TestInitialize() Initializes the test environment by creating a mock BOOSE.Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Project.html": {
    "href": "api/ASE_Assignment_Test_Project.html",
    "title": "Namespace ASE_Assignment_Test_Project | ASE Project",
    "keywords": "Namespace ASE_Assignment_Test_Project Classes CommandFactoryTest Test class to verify the behavior of the AppCommandFactory and its command creation logic. CommandUnitTests GloabalConfigTest Unit tests for the GlobalConfig class. MyAppCanvasTest Unit tests for the AppCanvas class. MyCircleUnitTests Unit tests for the CommandCircle class. MyClearUnitTests Unit tests for the CanvasClear command. MyDrawToUnitTests Test class for CommandDrawTo unit tests. MyFillUnitTests Unit tests for the CommandFill class. MyMoveToUnitTests Unit tests for the CommandMoveTo class. MyPenColourUnitTests Unit tests for the CommandPenColour class, ensuring it behaves correctly. MyRectangleUnitTests Unit tests for the CommandRectangle class. MyResetsUnitTests Unit test class for testing the Reseter class methods. MyStoredProgramUnitTests Unit tests for the MyStoredProgram class. MyTriangleTests Unit test class for testing the CommandTriangle class methods. MyWriteToUnitTests Unit test class for testing the CommandWriteText class methods. ParserTest Unit test class for testing the CommandParser class methods. PenSizeUnitTests Unit test class for testing the PenSize class methods."
  },
  "api/ASE_Sumit_Kasula_77356748.AppCanvas.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.AppCanvas.html",
    "title": "Class AppCanvas | ASE Project",
    "keywords": "Class AppCanvas Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll public class AppCanvas : ICanvas Inheritance object AppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCanvas() Initializes a new instance of the AppCanvas class with default canvas size. public AppCanvas() Remarks This constructor sets the canvas size to the default values defined by the constants XSIDE and YSIDE. It also initializes the pen size to 1 and sets the pen color to black (RGB: 0, 0, 0). Exceptions CanvasException Thrown if the canvas size cannot be set properly or if invalid values are provided for pen size or color. Properties Filled public bool Filled { get; set; } Property Value bool PenColour Gets or sets the pen color for the next drawing operation. public object PenColour { get; set; } Property Value object Remarks This property allows you to retrieve or modify the current pen color used for drawing operations. The color is represented as a Color object, and it determines the color of lines, shapes, and other drawn elements on the canvas. Exceptions InvalidCastException Thrown if the provided value for the pen color is not a valid Color object. PenSize Gets or sets the pen size, which determines the thickness of the lines drawn. public int PenSize { get; set; } Property Value int The pen size, which is a positive integer. It determines how thick the lines will appear on the canvas. A value greater than zero is required. If the value is zero or negative, an exception will be thrown. Exceptions CanvasException Thrown when the pen size is set to a value less than or equal to zero. XSIDE The width of the canvas. public int XSIDE { get; set; } Property Value int Remarks This defines the horizontal dimension of the canvas. It is used to validate the X positions during drawing operations. The default value is 640 pixels. Xpos Gets or sets the X position for the next drawing operation. public int Xpos { get; set; } Property Value int Remarks This property controls the X coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). YSIDE The height of the canvas. public int YSIDE { get; set; } Property Value int Remarks This defines the vertical dimension of the canvas. It is used to validate the Y positions during drawing operations. The default value is 480 pixels. Ypos Gets or sets the Y position for the next drawing operation. public int Ypos { get; set; } Property Value int Remarks This property controls the Y coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). Methods Circle(int, bool) Attempts to draw a circle at the current pen position, either filled or outlined, depending on the specified parameter. Ensures the radius is valid and checks if the circle fits within the canvas boundaries. If the radius is invalid or the circle exceeds the canvas size, a warning is logged, and drawing is skipped. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. Must be a positive integer greater than zero. If the radius is invalid, the circle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the circle should be filled or outlined: true: Draws a filled circle. false: Draws an outlined circle. Examples The following example demonstrates how to draw a filled circle with a radius of 50: Circle(50, true); Remarks The method ensures that drawing operations do not disrupt the program's flow. If the circle cannot be drawn due to invalid input or canvas boundary constraints, the method logs a warning and continues execution. Exceptions CanvasException This exception is caught internally to prevent program termination. It is used to log errors for invalid radius values or when the circle exceeds canvas dimensions. Clear() Clears the canvas by filling it with a default background color. public void Clear() DrawTo(int, int) Draws a line from the current pen position to a specified endpoint on the canvas. public void DrawTo(int x, int y) Parameters x int The X coordinate of the endpoint of the line. This value represents the position along the horizontal axis. y int The Y coordinate of the endpoint of the line. This value represents the position along the vertical axis. Examples The following example demonstrates how to draw a line from the current pen position to the point (100, 50): DrawTo(100, 50); Remarks The method updates the pen's current position to the specified endpoint after the line is drawn. Subsequent drawing operations will use the new position as the starting point. If the line cannot be drawn due to an uninitialized graphics context, the method logs a warning but does not interrupt execution. Exceptions CanvasException Thrown if the graphics context is not initialized or if the specified coordinates are outside the canvas boundaries. GetGraphics() Returns the current Graphics object used for drawing on the canvas. public Graphics GetGraphics() Returns Graphics The Graphics object associated with the current canvas. Examples The following example demonstrates how to retrieve the current Graphics object and handle any potential exceptions if the graphics object is not initialized: try { Graphics currentGraphics = GetGraphics(); // Use currentGraphics for drawing operations, if not null } catch (CanvasException ex) { Console.WriteLine($\"Error: {ex.Message}\"); // Handle the error (e.g., log it) } Remarks This method allows access to the internal Graphics object used for drawing on the canvas. If the graphics object has not been initialized (i.e., it is null), a BOOSE.CanvasException is thrown, indicating that the drawing cannot proceed. Exceptions CanvasException Thrown if the graphics object is not initialized or is null. This exception is thrown when there is an attempt to retrieve the Graphics object before it is set. MoveTo(int, int) Moves the drawing cursor to a specified position on the canvas without drawing any lines. public void MoveTo(int x, int y) Parameters x int The X coordinate to move the cursor to. Represents the horizontal position on the canvas. Must be within the canvas boundaries. y int The Y coordinate to move the cursor to. Represents the vertical position on the canvas. Must be within the canvas boundaries. Examples The following example demonstrates how to move the pen to position (50, 100) without drawing: MoveTo(50, 100); Remarks This method updates the current position of the pen to the specified coordinates (x, y) without performing any drawing operations. It ensures that subsequent drawing operations begin from the new cursor position. If the specified coordinates are outside the canvas boundaries, the position is not updated, and a warning is logged. Exceptions CanvasException Thrown if the specified coordinates are outside the canvas boundaries defined by XSIDE and YSIDE. Rect(int, int, bool) Draws a rectangle at the current cursor position with the specified dimensions and style (filled or outline). public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. height int The height of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the rectangle should be filled or outlined: true: Draws a filled rectangle. false: Draws an outlined rectangle. Examples The following example demonstrates how to draw a filled rectangle with a width of 100 and height of 50: Rect(100, 50, true); Remarks The rectangle is drawn starting from the current cursor position (xPos, yPos). If the rectangle's dimensions are invalid or it exceeds the canvas boundaries, it will not be drawn, and a warning will be logged. This ensures the program continues execution without interruption. Exceptions CanvasException Thrown if the specified rectangle dimensions are invalid or if the rectangle exceeds canvas boundaries. Reset() Resets the canvas to its initial state by resetting the drawing cursor position to the top-left corner. public void Reset() Examples The following example demonstrates how to reset the canvas and start fresh with drawing: Reset(); // Resets the drawing cursor to the top-left corner Remarks This method resets the drawing cursor (pen position) to the initial position at (0, 0). Any previous drawing operations will not be affected, but the next drawing operations will begin from the top-left corner of the canvas. Exceptions CanvasException Thrown if there is an issue with resetting the canvas. For example, if the canvas is in an invalid state or has not been properly initialized, an exception could be thrown. Set(int, int) Sets the canvas size and initializes the drawing surface. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas, in pixels. ysize int The height of the canvas, in pixels. Remarks This method initializes the canvas with the specified width and height. It also sets the starting position of the drawing cursor (xPos, yPos) to the top-left corner (0, 0). After setting the canvas size, it creates a new Bitmap object for drawing and a corresponding Graphics object. Additionally, it clears the canvas to prepare for drawing. Exceptions CanvasException Thrown if the width or height of the canvas is invalid (e.g., negative or zero), or if there is an error during the initialization of the drawing surface. SetCanvas(Bitmap, Graphics) Sets the canvas by assigning the provided Bitmap and Graphics objects for drawing operations. public void SetCanvas(Bitmap newBitmap, Graphics newGraphics) Parameters newBitmap Bitmap The Bitmap object to be used as the canvas surface. This object holds the pixel data for the canvas. newGraphics Graphics The Graphics object to be used for rendering on the canvas. This object provides drawing capabilities like shapes, text, and images. Examples The following example demonstrates how to initialize a canvas with a 500x500 Bitmap: Bitmap bitmap = new Bitmap(500, 500); Graphics graphics = Graphics.FromImage(bitmap); SetCanvas(bitmap, graphics); Remarks This method initializes or reinitializes the internal canvas by setting the Bitmap and Graphics objects. After setting the canvas, it clears the drawing surface with a white background to provide a fresh start. If you need a specific background color, you can modify the method to accept a color parameter or change the default behavior. Exceptions CanvasException Thrown if either newBitmap or newGraphics is null. SetColour(int, int, int) Sets the pen color using specified RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component of the color, ranging from 0 to 255. green int The green component of the color, ranging from 0 to 255. blue int The blue component of the color, ranging from 0 to 255. Examples The following example demonstrates how to set the pen color to blue: SetColour(0, 0, 255); // Sets the pen color to pure blue Remarks This method allows precise control of the pen's color by specifying the intensity of red, green, and blue components. If an invalid value is provided, an exception is thrown. The pen is updated with the new color and retains the existing pen size. Exceptions CanvasException Thrown when any of the RGB components are outside the valid range of 0 to 255. Tri(int, int) Draws a triangle within the specified bounding rectangle, ensuring it fits within the canvas boundaries. public void Tri(int width, int height) Parameters width int The width of the bounding rectangle, which defines the base of the triangle. height int The height of the bounding rectangle, which defines the height of the triangle. Examples The following example demonstrates how to draw a triangle with width 100 and height 50: Tri(100, 50); // Draws a triangle with base 100 and height 50 Remarks The method validates the triangle's width and height to ensure they are positive. It then checks if the triangle's bounding points fit within the canvas boundaries. If any point exceeds the canvas size, a CanvasException is thrown. Exceptions CanvasException Thrown if the triangle dimensions are invalid, exceed canvas boundaries, or are non-positive. WriteText(string) Draws the specified text at the current cursor position on the canvas. public void WriteText(string text) Parameters text string The text to be drawn on the canvas. Examples The following example demonstrates how to draw text at the current position: WriteText(\"Hello, Canvas!\"); // Draws the text \"Hello, Canvas!\" at the current cursor position Remarks The method checks whether the input text is valid (not null, empty, or whitespace). If the text exceeds the canvas boundaries, a BOOSE.CanvasException is thrown. The method also ensures the graphics object is initialized before attempting to draw the text. Exceptions CanvasException Thrown if the text is null, empty, or exceeds canvas boundaries. It is also thrown if the graphics object is not initialized. getBitmap() Returns the Bitmap object representing the current drawing on the canvas. public object getBitmap() Returns object The Bitmap object associated with the current canvas. This object contains the pixel data for the current drawing and can be used to save or manipulate the canvas image. Remarks The Bitmap object returned by this method reflects the current state of the canvas, including any drawings made with the pen. If no drawing has been done, it will return an empty or unmodified bitmap. Exceptions CanvasException Thrown if the Bitmap object has not been initialized or there is an issue with accessing it."
  },
  "api/ASE_Sumit_Kasula_77356748.AppCommandFactory.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.AppCommandFactory.html",
    "title": "Class AppCommandFactory | ASE Project",
    "keywords": "Class AppCommandFactory Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Factory class for creating command objects based on input strings. public class AppCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory AppCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCommandFactory() Initializes a new instance of the AppCommandFactory class. public AppCommandFactory() Methods MakeCommand(string) Creates a command object based on the specified command name. public override ICommand MakeCommand(string command) Parameters command string The name of the command. Returns ICommand An BOOSE.ICommand object corresponding to the command name. Exceptions FactoryException Thrown if the command is not recognized."
  },
  "api/ASE_Sumit_Kasula_77356748.ApplicationArray.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.ApplicationArray.html",
    "title": "Class ApplicationArray | ASE Project",
    "keywords": "Class ApplicationArray Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents an application array that supports operations with integer and real data types. public class ApplicationArray : Evaluation, ICommand Inheritance object Command Evaluation ApplicationArray Implements ICommand Derived ApplicationPeek ApplicationPoke Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationArray() Initializes a new instance of the ApplicationArray class. public ApplicationArray() Fields IntValue Stores the integer value for array operations. protected int IntValue Field Value int PEEK Constant representing the PEEK (read) operation. protected const bool PEEK = false Field Value bool POKE Constant representing the POKE (write) operation. public const bool POKE = true Field Value bool RealValue Stores the real (double) value for array operations. protected double RealValue Field Value double columnCurrent The current column index being accessed. protected int columnCurrent Field Value int columnExpression The expression representing the column index. protected string columnExpression Field Value string columnsCount The number of columns in the array (default is 1). protected int columnsCount Field Value int intArray Represents the underlying storage for integer arrays. protected int[,] intArray Field Value int[,] peekValue The value retrieved during a PEEK (read) operation. protected string peekValue Field Value string pokeValue The value used during a POKE (write) operation. protected string pokeValue Field Value string realArray Represents the underlying storage for real (double) arrays. protected double[,] realArray Field Value double[,] rowCurrent The current row index being accessed. protected int rowCurrent Field Value int rowExpression The expression representing the row index. protected string rowExpression Field Value string rowsCount The number of rows in the array. protected int rowsCount Field Value int type Specifies the data type of the array (\"int\" or \"real\"). protected string type Field Value string Properties Columns Gets the number of columns in the array. protected int Columns { get; } Property Value int Rows Gets the number of rows in the array. protected int Rows { get; } Property Value int Methods ArrayRestrictions() Defines restrictions on array operations. Implementation is left blank for future extension. public void ArrayRestrictions() CheckParameters(string[]) Validates the parameters provided for the array definition. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters for the array. Exceptions CommandException Thrown when the parameter count is incorrect. Compile() Compiles the array definition, validating and initializing parameters. public override void Compile() Exceptions CommandException Thrown when the array definition is invalid. Execute() Executes the initialization of the array based on its type and dimensions. public override void Execute() Exceptions CommandException Thrown when the array type is unsupported. GetIntArray(int, int) Retrieves an integer value from the specified position in the array. public virtual int GetIntArray(int row, int col) Parameters row int The row index. col int The column index. Returns int The integer value at the specified position. Exceptions CommandException Thrown when the index is out of bounds. GetRealArray(int, int) Retrieves a real (double) value from the specified position in the array. public virtual double GetRealArray(int row, int col) Parameters row int The row index. col int The column index. Returns double The real value at the specified position. Exceptions CommandException Thrown when the index is out of bounds. ProcessArrayParametersCompile(bool) Processes the parameters for array operations (POKE or PEEK) during compilation. protected virtual void ProcessArrayParametersCompile(bool isPokeOperation) Parameters isPokeOperation bool True if the operation is POKE; otherwise, false. Exceptions CommandException Thrown when the syntax or variable references are invalid. ProcessArrayParametersExecute(bool) Processes the parameters for array operations (POKE or PEEK) during execution. protected virtual void ProcessArrayParametersExecute(bool isPokeOperation) Parameters isPokeOperation bool True if the operation is POKE; otherwise, false. Exceptions CommandException Thrown when the indices or values are invalid. ReduceRestrictionCounter() Reduces the restriction counter. Implementation is left blank for future extension. protected void ReduceRestrictionCounter() SetIntArray(int, int, int) Sets an integer value at the specified position in the array. public virtual void SetIntArray(int value, int row, int col) Parameters value int The value to set. row int The row index. col int The column index. Exceptions CommandException Thrown when the index is out of bounds. SetRealArray(double, int, int) Sets a real (double) value at the specified position in the array. public virtual void SetRealArray(double value, int row, int col) Parameters value double The value to set. row int The row index. col int The column index. Exceptions CommandException Thrown when the index is out of bounds."
  },
  "api/ASE_Sumit_Kasula_77356748.ApplicationBoolean.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.ApplicationBoolean.html",
    "title": "Class ApplicationBoolean | ASE Project",
    "keywords": "Class ApplicationBoolean Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents a Boolean application class that extends the BOOSE.Boolean class. public class ApplicationBoolean : Boolean, ICommand Inheritance object Command Evaluation Boolean ApplicationBoolean Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Defines restrictions for the boolean application. Implementation is currently left blank for future extension. public override void Restrictions()"
  },
  "api/ASE_Sumit_Kasula_77356748.ApplicationCast.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.ApplicationCast.html",
    "title": "Class ApplicationCast | ASE Project",
    "keywords": "Class ApplicationCast Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents a command for casting an integer variable to a real variable within the program context. public class ApplicationCast : Command, ICommand Inheritance object Command ApplicationCast Implements ICommand Inherited Members Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters provided for the cast operation. public override void CheckParameters(string[] parameter) Parameters parameter string[] The list of parameters for the command. Exceptions CommandException Thrown when the number of parameters is invalid. Compile() Compiles the command by validating the source and target variables and ensuring casting is valid. public override void Compile() Exceptions CommandException Thrown when the source or target variable does not exist, or if an invalid cast is attempted. Execute() Executes the cast operation, converting the value from the source integer variable to the target real variable. public override void Execute() Exceptions InvalidCastException Thrown when the casting operation is invalid."
  },
  "api/ASE_Sumit_Kasula_77356748.ApplicationCompoundCommand.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.ApplicationCompoundCommand.html",
    "title": "Class ApplicationCompoundCommand | ASE Project",
    "keywords": "Class ApplicationCompoundCommand Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents a compound command used in conditional control flow operations. Inherits from ApplicationConditionalCommand. public class ApplicationCompoundCommand : ApplicationConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand Implements ICommand Derived ApplicationElse ApplicationEnd ApplicationIf ApplicationWhile Inherited Members ApplicationConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationCompoundCommand() Initializes a new instance of the ApplicationCompoundCommand class without instance restrictions. public ApplicationCompoundCommand() Remarks This constructor removes any restrictions on the number of instances that can be created, enabling flexible use of compound commands. Properties CorrespondingCommand Gets or sets the corresponding conditional command associated with this compound command. public ConditionalCommand CorrespondingCommand { get; set; } Property Value ConditionalCommand Remarks This property is used to establish a link between the compound command and its parent control flow command. For example, an \"if-end\" command will link to its \"if\" block. Methods CheckParameters(string[]) Validates the parameters passed to the compound command. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of parameters to validate. Remarks This method ensures that the compound command is associated with a valid control flow structure. It validates the following: Only one parameter is passed. The parameter contains an expected \"end\" marker, such as \"ifEnd\", \"whileEnd\", \"forEnd\", or \"methodEnd\". If the validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter count is invalid or the parameter does not contain a valid \"end\" marker. Compile() Compiles the compound command to prepare it for execution. public override void Compile() Remarks This method calls the base BOOSE.ConditionalCommand.Compile() method to handle any setup or preparation required before the command is executed. ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appMethod = new ApplicationCompoundCommand(); appMethod.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 꿁 in the BOOSE.Boolean class using reflection and updates its value. Exceptions BOOSEException Thrown when the private field 꿁 cannot be accessed using reflection."
  },
  "api/ASE_Sumit_Kasula_77356748.ApplicationConditionalCommand.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.ApplicationConditionalCommand.html",
    "title": "Class ApplicationConditionalCommand | ASE Project",
    "keywords": "Class ApplicationConditionalCommand Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents a conditional command with extended functionality for managing internal static fields. Inherits from BOOSE.ConditionalCommand. public class ApplicationConditionalCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand Implements ICommand Derived ApplicationCompoundCommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the conditional command and resets the private static field to 0. public override void Execute() Examples var command = new ApplicationConditionalCommand(); command.Execute(); Remarks This method overrides the BOOSE.ConditionalCommand.Execute() method to include resetting the value of the private static field 꿁 to 0 after executing the base command. ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var command = new ApplicationConditionalCommand(); command.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 꿁 in the BOOSE.Boolean class using reflection and updates its value. Exceptions BOOSEException Thrown when the private field 꿁 cannot be accessed using reflection."
  },
  "api/ASE_Sumit_Kasula_77356748.ApplicationElse.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.ApplicationElse.html",
    "title": "Class ApplicationElse | ASE Project",
    "keywords": "Class ApplicationElse Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents the \"else\" command in the application, which provides alternate execution in conditional statements. public class ApplicationElse : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationElse Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationElse() Initializes a new instance of the ApplicationElse class. public ApplicationElse() Properties CorrespondingEnd Gets or sets the corresponding end command for the \"else\" block. public End CorrespondingEnd { get; set; } Property Value End Methods CheckParameters(string[]) Validates the parameters for the \"else\" command. public override void CheckParameters(string[] parameters) Parameters parameters string[] The parameters provided for the \"else\" command. Exceptions CommandException Thrown if the parameters are invalid or if they do not match the expected \"else\". Compile() Compiles the \"else\" command by linking it to its corresponding conditional command. public override void Compile() Exceptions CommandException Thrown if there is an issue with the corresponding conditional command. Execute() Executes the \"else\" command, updating the program counter if the condition is met. public override void Execute()"
  },
  "api/ASE_Sumit_Kasula_77356748.ApplicationEnd.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.ApplicationEnd.html",
    "title": "Class ApplicationEnd | ASE Project",
    "keywords": "Class ApplicationEnd Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents the \"end\" command, marking the conclusion of compound commands such as \"if\", \"while\", \"for\", and \"method\". public class ApplicationEnd : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationEnd Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationEnd() Initializes a new instance of the ApplicationEnd class. public ApplicationEnd() Methods Compile() Compiles the \"end\" command by associating it with its corresponding opening command (e.g., \"if\", \"while\", \"for\", or \"method\"). public override void Compile() Exceptions CommandException Thrown if the syntax does not match the expected \"end\" type for the corresponding opening command. Execute() Executes the \"end\" command to handle flow control for loops or methods, such as resetting the program counter (PC) for loops or returning from methods. public override void Execute() Exceptions CommandException Thrown if the loop control variable does not exist or if the loop step is invalid, causing infinite loops."
  },
  "api/ASE_Sumit_Kasula_77356748.ApplicationFor.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.ApplicationFor.html",
    "title": "Class ApplicationFor | ASE Project",
    "keywords": "Class ApplicationFor Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents an implementation of the \"for\" loop command with extended functionality. Inherits from BOOSE.For. public class ApplicationFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For ApplicationFor Implements ICommand Inherited Members For.Compile() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the overridden logic and resets the private static field to 0. public override void Execute() Examples var appFor = new ApplicationFor(); appFor.Execute(); Remarks This method overrides the BOOSE.For.Execute() method to include resetting the private static field 꿁 to 0 after executing the base logic. ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appFor = new ApplicationFor(); appFor.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 꿁 in the BOOSE.Boolean class using reflection and updates its value. Exceptions BOOSEException Thrown when the private field 꿁 cannot be accessed using reflection."
  },
  "api/ASE_Sumit_Kasula_77356748.ApplicationIf.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.ApplicationIf.html",
    "title": "Class ApplicationIf | ASE Project",
    "keywords": "Class ApplicationIf Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents an 'If' command in the application, inheriting from the ApplicationCompoundCommand. public class ApplicationIf : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationIf Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) ApplicationConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationIf() Initializes a new instance of the ApplicationIf class. public ApplicationIf() Methods ReduceRestrictions() Method to reduce restrictions for the 'If' command. protected void ReduceRestrictions()"
  },
  "api/ASE_Sumit_Kasula_77356748.ApplicationInt.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.ApplicationInt.html",
    "title": "Class ApplicationInt | ASE Project",
    "keywords": "Class ApplicationInt Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents an application-specific implementation of the BOOSE.Int class. public class ApplicationInt : Int, ICommand Inheritance object Command Evaluation Int ApplicationInt Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Overrides the Restrictions method to implement specific restrictions for the application. public override void Restrictions()"
  },
  "api/ASE_Sumit_Kasula_77356748.ApplicationMethod.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.ApplicationMethod.html",
    "title": "Class ApplicationMethod | ASE Project",
    "keywords": "Class ApplicationMethod Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents an extended implementation of a method command, inheriting from BOOSE.Method. public class ApplicationMethod : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method ApplicationMethod Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationMethod() Initializes a new instance of the ApplicationMethod class. public ApplicationMethod() Examples var appMethod = new ApplicationMethod(); Remarks The constructor overrides restrictions on method count by invoking ReduceRestrictions twice. It also resets the counts for the fields 꿁 and 꿒 to 0 to ensure the method can be used without restrictions. Methods ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appMethod = new ApplicationMethod(); appMethod.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 꿁 in the BOOSE.Boolean class using reflection and updates its value to manage restrictions. Exceptions BOOSEException Thrown when the private field 꿁 cannot be accessed using reflection. ResetOrDecreaseMethodCount(int) Resets or decreases the value of a private static field in the BOOSE.Method class. public void ResetOrDecreaseMethodCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appMethod = new ApplicationMethod(); appMethod.ResetOrDecreaseMethodCount(10); Remarks This method accesses the private static field 꿒 in the BOOSE.Method class using reflection and updates its value to manage restrictions on the method count. Exceptions BOOSEException Thrown when the private field 꿒 cannot be accessed using reflection."
  },
  "api/ASE_Sumit_Kasula_77356748.ApplicationPeek.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.ApplicationPeek.html",
    "title": "Class ApplicationPeek | ASE Project",
    "keywords": "Class ApplicationPeek Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents the 'Peek' operation for processing array parameters in the application. Inherits from ApplicationArray. public class ApplicationPeek : ApplicationArray, ICommand Inheritance object Command Evaluation ApplicationArray ApplicationPeek Implements ICommand Inherited Members ApplicationArray.PEEK ApplicationArray.POKE ApplicationArray.type ApplicationArray.IntValue ApplicationArray.RealValue ApplicationArray.rowsCount ApplicationArray.columnsCount ApplicationArray.intArray ApplicationArray.realArray ApplicationArray.pokeValue ApplicationArray.peekValue ApplicationArray.rowExpression ApplicationArray.columnExpression ApplicationArray.rowCurrent ApplicationArray.columnCurrent ApplicationArray.Rows ApplicationArray.Columns ApplicationArray.ArrayRestrictions() ApplicationArray.ReduceRestrictionCounter() ApplicationArray.ProcessArrayParametersCompile(bool) ApplicationArray.ProcessArrayParametersExecute(bool) ApplicationArray.SetIntArray(int, int, int) ApplicationArray.SetRealArray(double, int, int) ApplicationArray.GetIntArray(int, int) ApplicationArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationPeek() Initializes a new instance of the ApplicationPeek class. public ApplicationPeek() Methods CheckParameters(string[]) Checks the parameters for the Peek operation. Throws a NotImplementedException as parameter validation is not implemented. public override void CheckParameters(string[] parameters) Parameters parameters string[] The array of parameters to check. Compile() Compiles the Peek operation by processing the array parameters. public override void Compile() Execute() Executes the Peek operation by processing the array parameters and updating the variable with the peeked value. public override void Execute()"
  },
  "api/ASE_Sumit_Kasula_77356748.ApplicationPoke.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.ApplicationPoke.html",
    "title": "Class ApplicationPoke | ASE Project",
    "keywords": "Class ApplicationPoke Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents the 'Poke' operation for processing array parameters in the application. Inherits from ApplicationArray. public class ApplicationPoke : ApplicationArray, ICommand Inheritance object Command Evaluation ApplicationArray ApplicationPoke Implements ICommand Inherited Members ApplicationArray.PEEK ApplicationArray.POKE ApplicationArray.type ApplicationArray.IntValue ApplicationArray.RealValue ApplicationArray.rowsCount ApplicationArray.columnsCount ApplicationArray.intArray ApplicationArray.realArray ApplicationArray.pokeValue ApplicationArray.peekValue ApplicationArray.rowExpression ApplicationArray.columnExpression ApplicationArray.rowCurrent ApplicationArray.columnCurrent ApplicationArray.Rows ApplicationArray.Columns ApplicationArray.ArrayRestrictions() ApplicationArray.ReduceRestrictionCounter() ApplicationArray.ProcessArrayParametersCompile(bool) ApplicationArray.ProcessArrayParametersExecute(bool) ApplicationArray.SetIntArray(int, int, int) ApplicationArray.SetRealArray(double, int, int) ApplicationArray.GetIntArray(int, int) ApplicationArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationPoke() Initializes a new instance of the ApplicationPoke class. public ApplicationPoke() Methods CheckParameters(string[]) Checks the parameters for the Poke operation. Ensures the number of parameters is valid for the Poke operation. public override void CheckParameters(string[] parameter) Parameters parameter string[] The array of parameters to check. Exceptions CommandException Thrown when the number of parameters is invalid. Compile() Compiles the Poke operation by processing the array parameters. public override void Compile() Execute() Executes the Poke operation by processing the array parameters. public override void Execute() Set(StoredProgram, string) Sets the program and parameters for the Poke operation. public override void Set(StoredProgram program, string paramsList) Parameters program StoredProgram The stored program to associate with the operation. paramsList string The list of parameters for the operation."
  },
  "api/ASE_Sumit_Kasula_77356748.ApplicationReal.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.ApplicationReal.html",
    "title": "Class ApplicationReal | ASE Project",
    "keywords": "Class ApplicationReal Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents an application-specific implementation of the BOOSE.Real class. public class ApplicationReal : Real, ICommand Inheritance object Command Evaluation Real ApplicationReal Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Overrides the Restrictions method to implement specific restrictions for the application. public override void Restrictions()"
  },
  "api/ASE_Sumit_Kasula_77356748.ApplicationWhile.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.ApplicationWhile.html",
    "title": "Class ApplicationWhile | ASE Project",
    "keywords": "Class ApplicationWhile Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents a 'While' command in the application, inheriting from ApplicationCompoundCommand. public class ApplicationWhile : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationWhile Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) ApplicationConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationWhile() Initializes a new instance of the ApplicationWhile class. public ApplicationWhile() Methods ReduceRestrictions() Method to reduce restrictions for the 'While' command. protected void ReduceRestrictions()"
  },
  "api/ASE_Sumit_Kasula_77356748.CanvasClear.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.CanvasClear.html",
    "title": "Class CanvasClear | ASE Project",
    "keywords": "Class CanvasClear Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents a command to clear the canvas. public class CanvasClear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter CanvasClear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CanvasClear() Initializes a new instance of the CanvasClear class. public CanvasClear() CanvasClear(Canvas) Initializes a new instance of the CanvasClear class with a specified canvas. public CanvasClear(Canvas c) Parameters c Canvas The canvas to be cleared. Methods CheckParameters(string[]) Checks parameters for the command. No parameters are required for this command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters (not used). Execute() Executes the command to clear the canvas. public override void Execute()"
  },
  "api/ASE_Sumit_Kasula_77356748.CommandCircle.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.CommandCircle.html",
    "title": "Class CommandCircle | ASE Project",
    "keywords": "Class CommandCircle Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents a command to draw a circle on the canvas. public class CommandCircle : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CommandCircle() Initializes a new instance of the CommandCircle class. public CommandCircle() CommandCircle(Canvas, int) Initializes a new instance of the CommandCircle class with a specified canvas and radius. public CommandCircle(Canvas canvas, int radius) Parameters canvas Canvas The canvas where the circle will be drawn. radius int The radius of the circle. Methods CheckParameters(string[]) Checks the parameters provided for the circle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters representing the radius. Exceptions CommandException Thrown if the parameters are invalid. Execute() Executes the command to draw the circle on the canvas. public override void Execute()"
  },
  "api/ASE_Sumit_Kasula_77356748.CommandDrawTo.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.CommandDrawTo.html",
    "title": "Class CommandDrawTo | ASE Project",
    "keywords": "Class CommandDrawTo Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents a command to draw a line to specified coordinates on the canvas. public class CommandDrawTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandDrawTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CommandDrawTo() Initializes a new instance of the CommandDrawTo class. public CommandDrawTo() CommandDrawTo(Canvas, int, int) Initializes a new instance of the CommandDrawTo class with specified coordinates. public CommandDrawTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas where the line will be drawn. x int The x-coordinate. y int The y-coordinate. Exceptions RestrictionException Thrown if coordinates are negative. Methods CheckParameters(string[]) Checks the parameters for the draw-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters representing x and y coordinates. Exceptions CommandException Thrown if parameters are invalid. Execute() Executes the command to draw a line to specified coordinates. public override void Execute()"
  },
  "api/ASE_Sumit_Kasula_77356748.CommandFill.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.CommandFill.html",
    "title": "Class CommandFill | ASE Project",
    "keywords": "Class CommandFill Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents a command to set the fill status for shapes on the canvas. public class CommandFill : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandFill Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CommandFill() Initializes a new instance of the CommandFill class. public CommandFill() CommandFill(Canvas, string) Initializes a new instance of the CommandFill class with a specified canvas and text. public CommandFill(Canvas c, string text) Parameters c Canvas The canvas where the fill command is applied. text string The text indicating the fill status (\"true\" or \"false\"). Exceptions ArgumentNullException Thrown when the text is null. Methods CheckParameters(string[]) Checks if the parameters for the fill command are valid. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters containing the text value. Exceptions CommandException Thrown when the parameters are invalid. Execute() Executes the command to set the fill status based on the text parameter. public override void Execute() Exceptions RestrictionException Thrown when the text is invalid or exceeds the allowed length. SetFilled(string) Sets the filled state of the shape using a text-based argument. public void SetFilled(string isFilledStr) Parameters isFilledStr string A string value (\"true\" or \"false\") indicating the filled status. Exceptions CommandException Thrown if the value is not \"true\" or \"false\"."
  },
  "api/ASE_Sumit_Kasula_77356748.CommandMoveTo.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.CommandMoveTo.html",
    "title": "Class CommandMoveTo | ASE Project",
    "keywords": "Class CommandMoveTo Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents a command to move the drawing position to specified coordinates on the canvas. public class CommandMoveTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandMoveTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CommandMoveTo() Initializes a new instance of the CommandMoveTo class. public CommandMoveTo() CommandMoveTo(Canvas, int, int) Initializes a new instance of the CommandMoveTo class with specified coordinates. public CommandMoveTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas where the movement is applied. x int The x-coordinate. y int The y-coordinate. Exceptions RestrictionException Thrown if coordinates exceed the allowed maximum value. Methods CheckParameters(string[]) Validates the parameters for the move-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters containing the x and y coordinates. Exceptions CommandException Thrown if parameters are invalid. Execute() Executes the command to move to specified coordinates. public override void Execute() Exceptions RestrictionException Thrown if coordinates exceed the allowed maximum value."
  },
  "api/ASE_Sumit_Kasula_77356748.CommandParser.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.CommandParser.html",
    "title": "Class CommandParser | ASE Project",
    "keywords": "Class CommandParser Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Parses commands and programs using a specified command factory and stored program. Implements the BOOSE.IParser interface. public class CommandParser : IParser Inheritance object CommandParser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandParser(CommandFactory, StoredProgram) Initializes a new instance of the CommandParser class. public CommandParser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory The command factory used to create commands. program StoredProgram The stored program to be parsed. Methods ParseCommand(string) Parses a single line of input and converts it into an BOOSE.ICommand. public virtual ICommand ParseCommand(string line) Parameters line string The input line to be parsed. Returns ICommand An BOOSE.ICommand representing the parsed command. Returns null if the line is a comment (starts with '*'). Exceptions ParserException Thrown if a variable does not exist or has an unknown type. ParseProgram(string) Parses an entire program consisting of multiple lines of commands. public virtual void ParseProgram(string program) Parameters program string The program string containing multiple lines of commands. Remarks Each line in the program is parsed as a command. Syntax errors are logged, and variables or methods are processed accordingly."
  },
  "api/ASE_Sumit_Kasula_77356748.CommandPenColour.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.CommandPenColour.html",
    "title": "Class CommandPenColour | ASE Project",
    "keywords": "Class CommandPenColour Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents a command to set the pen color using RGB values. public class CommandPenColour : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters CommandPenColour Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CommandPenColour() Initializes a new instance of the CommandPenColour class. public CommandPenColour() CommandPenColour(Canvas, int, int, int) Initializes a new instance of the CommandPenColour class with specified RGB values. public CommandPenColour(Canvas canvas, int r, int g, int b) Parameters canvas Canvas The canvas where the pen color will be applied. r int The red component (0-255). g int The green component (0-255). b int The blue component (0-255). Methods CheckParameters(string[]) Validates the parameters for the pen color command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of strings containing RGB values. Exceptions CommandException Thrown when parameters are missing or invalid. Execute() Executes the command to set the pen color using the specified RGB values. public override void Execute() Exceptions RestrictionException Thrown when RGB values are outside the range of 0-255."
  },
  "api/ASE_Sumit_Kasula_77356748.CommandRectangle.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.CommandRectangle.html",
    "title": "Class CommandRectangle | ASE Project",
    "keywords": "Class CommandRectangle Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents a command to draw a rectangle on the canvas. public class CommandRectangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandRectangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CommandRectangle() Initializes a new instance of the CommandRectangle class. public CommandRectangle() CommandRectangle(Canvas, int, int) Initializes a new instance of the CommandRectangle class with specified width and height. public CommandRectangle(Canvas canvas, int width, int height) Parameters canvas Canvas The canvas where the rectangle will be drawn. width int The width of the rectangle. height int The height of the rectangle. Methods CheckParameters(string[]) Validates the parameters for the rectangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of strings containing width and height. Exceptions CommandException Thrown when parameters are missing or invalid. Execute() Executes the command to draw a rectangle with the specified width and height. public override void Execute() Exceptions RestrictionException Thrown when width or height exceeds 2000."
  },
  "api/ASE_Sumit_Kasula_77356748.CommandTriangle.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.CommandTriangle.html",
    "title": "Class CommandTriangle | ASE Project",
    "keywords": "Class CommandTriangle Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents a command to draw a triangle on the canvas. public class CommandTriangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandTriangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CommandTriangle() Initializes a new instance of the CommandTriangle class. public CommandTriangle() CommandTriangle(Canvas, int, int) Initializes a new instance of the CommandTriangle class with specified base length and height. public CommandTriangle(Canvas c, int baseLength, int height) Parameters c Canvas The canvas where the triangle will be drawn. baseLength int The base length of the triangle. height int The height of the triangle. Methods CheckParameters(string[]) Validates the parameters for drawing a triangle. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of strings containing base length and height. Exceptions CommandException Thrown when parameters are missing or invalid. Execute() Executes the command to draw a triangle on the canvas. public override void Execute() Exceptions RestrictionException Thrown when base length or height exceeds 2000."
  },
  "api/ASE_Sumit_Kasula_77356748.CommandWriteText.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.CommandWriteText.html",
    "title": "Class CommandWriteText | ASE Project",
    "keywords": "Class CommandWriteText Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents a command to write text on the canvas. Inherits from BOOSE.CommandOneParameter. public class CommandWriteText : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandWriteText Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CommandWriteText() Initializes a new instance of the CommandWriteText class. public CommandWriteText() CommandWriteText(Canvas, string) Initializes a new instance of the CommandWriteText class with a specified canvas and text. public CommandWriteText(Canvas c, string text) Parameters c Canvas The canvas where the text will be written. text string The text to be written on the canvas. Methods CheckParameters(string[]) Validates the parameters for the text command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Remarks Checks if the parameter list contains exactly one parameter and ensures it is not null, empty, or whitespace. Throws BOOSE.CommandException if validation fails. Execute() Executes the command to write text on the canvas. public override void Execute() Remarks The method validates the text, processes it, and writes it to the canvas. Throws BOOSE.RestrictionException if the text is null, empty, whitespace, or exceeds 100 characters."
  },
  "api/ASE_Sumit_Kasula_77356748.Form1.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.Form1.html",
    "title": "Class Form1 | ASE Project",
    "keywords": "Class Form1 Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Sumit_Kasula_77356748.GlobalConfig.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.GlobalConfig.html",
    "title": "Class GlobalConfig | ASE Project",
    "keywords": "Class GlobalConfig Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Holds global configuration settings for the application. public class GlobalConfig Inheritance object GlobalConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFillEnabled public static bool IsFillEnabled { get; set; } Property Value bool MaxX public static int MaxX { get; set; } Property Value int MaxY public static int MaxY { get; set; } Property Value int PenSize public static int PenSize { get; set; } Property Value int"
  },
  "api/ASE_Sumit_Kasula_77356748.MyStoredProgram.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.MyStoredProgram.html",
    "title": "Class MyStoredProgram | ASE Project",
    "keywords": "Class MyStoredProgram Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents a stored program that can be executed on a canvas. Supports variables, methods, and conditional commands. public class MyStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram MyStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.FindVariable(Evaluation) StoredProgram.UpdateVariable(string, bool) StoredProgram.DeleteVariable(string) StoredProgram.IsExpression(string) StoredProgram.EvaluateExpressionWithString(string) StoredProgram.EvaluateExpression(string) StoredProgram.Push(ConditionalCommand) StoredProgram.Pop() StoredProgram.Add(Command) StoredProgram.NextCommand() StoredProgram.ResetProgram() StoredProgram.Commandsleft() StoredProgram.Run() ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyStoredProgram(ICanvas) Initializes a new instance of the MyStoredProgram class with a specified canvas. public MyStoredProgram(ICanvas _canvas) Parameters _canvas ICanvas The canvas on which the program will run. Fields SyntaxOk public bool SyntaxOk Field Value bool Properties PC Gets or sets the program counter. public override int PC { get; set; } Property Value int Methods AddMethod(Method) Adds a method to the stored program. public override void AddMethod(Method M) Parameters M Method The method to add. AddVariable(Evaluation) Adds a variable to the stored program. public override void AddVariable(Evaluation Variable) Parameters Variable Evaluation The variable to add. FindVariable(string) Finds the index of a variable by its name. public override int FindVariable(string varName) Parameters varName string The name of the variable. Returns int The index of the variable, or -1 if not found. GetMethod(string) Retrieves a method by its name. public override Method GetMethod(string MethodName) Parameters MethodName string The name of the method. Returns Method The method with the specified name. Exceptions StoredProgramException Thrown if the method is not found. GetVarValue(string) Retrieves the value of a variable as a string. public override string GetVarValue(string varName) Parameters varName string The name of the variable. Returns string The value of the variable as a string. Exceptions StoredProgramException Thrown if the variable is not found. GetVariable(int) Retrieves a variable by its index. public override Evaluation GetVariable(int index) Parameters index int The index of the variable. Returns Evaluation The variable at the specified index. Exceptions StoredProgramException Thrown if the index is invalid. GetVariable(string) Retrieves a variable by its name. public override Evaluation GetVariable(string VarName) Parameters VarName string The name of the variable. Returns Evaluation The variable with the specified name. Exceptions StoredProgramException Thrown if the variable is not found. UpdateVariable(string, double) Updates the value of a real variable. public override void UpdateVariable(string varName, double value) Parameters varName string The name of the variable. value double The new value of the variable. Exceptions CommandException Thrown if the variable type is invalid. UpdateVariable(string, int) Updates the value of an integer variable. public override void UpdateVariable(string varName, int value) Parameters varName string The name of the variable. value int The new value of the variable. VariableExists(string) Checks if a variable exists in the stored program. public override bool VariableExists(string varName) Parameters varName string The name of the variable. Returns bool True if the variable exists, false otherwise."
  },
  "api/ASE_Sumit_Kasula_77356748.PenSize.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.PenSize.html",
    "title": "Class PenSize | ASE Project",
    "keywords": "Class PenSize Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll public class PenSize : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter PenSize Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PenSize() public PenSize() PenSize(Canvas, int) public PenSize(Canvas c, int pensize) Parameters c Canvas pensize int Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute() SetPenSize(int) public void SetPenSize(int penSize) Parameters penSize int"
  },
  "api/ASE_Sumit_Kasula_77356748.Reseter.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.Reseter.html",
    "title": "Class Reseter | ASE Project",
    "keywords": "Class Reseter Namespace ASE_Sumit_Kasula_77356748 Assembly ASE_Sumit_Kasula_77356748.dll Represents the 'Reseter' command that resets the canvas. public class Reseter : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Reseter Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Reseter() Initializes a new instance of the Reseter class. public Reseter() Reseter(Canvas) Initializes a new instance of the Reseter class with a specified canvas. public Reseter(Canvas c) Parameters c Canvas The canvas to be reset. Methods CheckParameters(string[]) Checks parameters for the command. No parameters are required for this command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters (not used). Execute() Executes the reset command, clearing the canvas. public override void Execute()"
  },
  "api/ASE_Sumit_Kasula_77356748.html": {
    "href": "api/ASE_Sumit_Kasula_77356748.html",
    "title": "Namespace ASE_Sumit_Kasula_77356748 | ASE Project",
    "keywords": "Namespace ASE_Sumit_Kasula_77356748 Classes AppCanvas AppCommandFactory Factory class for creating command objects based on input strings. ApplicationArray Represents an application array that supports operations with integer and real data types. ApplicationBoolean Represents a Boolean application class that extends the BOOSE.Boolean class. ApplicationCast Represents a command for casting an integer variable to a real variable within the program context. ApplicationCompoundCommand Represents a compound command used in conditional control flow operations. Inherits from ApplicationConditionalCommand. ApplicationConditionalCommand Represents a conditional command with extended functionality for managing internal static fields. Inherits from BOOSE.ConditionalCommand. ApplicationElse Represents the \"else\" command in the application, which provides alternate execution in conditional statements. ApplicationEnd Represents the \"end\" command, marking the conclusion of compound commands such as \"if\", \"while\", \"for\", and \"method\". ApplicationFor Represents an implementation of the \"for\" loop command with extended functionality. Inherits from BOOSE.For. ApplicationIf Represents an 'If' command in the application, inheriting from the ApplicationCompoundCommand. ApplicationInt Represents an application-specific implementation of the BOOSE.Int class. ApplicationMethod Represents an extended implementation of a method command, inheriting from BOOSE.Method. ApplicationPeek Represents the 'Peek' operation for processing array parameters in the application. Inherits from ApplicationArray. ApplicationPoke Represents the 'Poke' operation for processing array parameters in the application. Inherits from ApplicationArray. ApplicationReal Represents an application-specific implementation of the BOOSE.Real class. ApplicationWhile Represents a 'While' command in the application, inheriting from ApplicationCompoundCommand. CanvasClear Represents a command to clear the canvas. CommandCircle Represents a command to draw a circle on the canvas. CommandDrawTo Represents a command to draw a line to specified coordinates on the canvas. CommandFill Represents a command to set the fill status for shapes on the canvas. CommandMoveTo Represents a command to move the drawing position to specified coordinates on the canvas. CommandParser Parses commands and programs using a specified command factory and stored program. Implements the BOOSE.IParser interface. CommandPenColour Represents a command to set the pen color using RGB values. CommandRectangle Represents a command to draw a rectangle on the canvas. CommandTriangle Represents a command to draw a triangle on the canvas. CommandWriteText Represents a command to write text on the canvas. Inherits from BOOSE.CommandOneParameter. Form1 GlobalConfig Holds global configuration settings for the application. MyStoredProgram Represents a stored program that can be executed on a canvas. Supports variables, methods, and conditional commands. PenSize Reseter Represents the 'Reseter' command that resets the canvas."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ASE Project",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ASE Project",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE Project",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}